{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "ansible/cf_templates/json/puppetmaster.json",

    "Parameters": {
        "vpcId": {
            "Description": "VPC ID",
            "Type": "String"
        },

        "hostedZoneId": {
            "Description": "Hosted zone ID",
            "Type": "String"
        },

        "hostedZoneName": {
            "Description": "Hosted zone name",
            "Type": "String"
        },

        "vpcCidr": {
            "Description": "VPC CIDR block",
            "Type": "String"
        },

        "vpcEnv": {
            "Description": "VPC environment string",
            "Type": "String"
        },

        "ami": {
            "Description": "Instance AMI",
            "Type": "String"
        },

        "instanceType": {
            "Description": "Instance type",
            "Type": "String"
        },

        "sshKey": {
            "Description": "EC2 instance SSH key",
            "Type": "String"
        },

        "serviceSubnetAId": {
            "Description": "Logical ID of ServiceSubnetA",
            "Type": "String"
        },

        "puppetEnv": {
            "Description": "Puppet environment",
            "Type": "String"
        },

        "puppetRole": {
            "Description": "Puppet role",
            "Type": "String"
        },

        "business": {
            "Description": "Business owner of resource",
            "Type": "String"
        }


    },

    "Resources": {
        "PuppetmasterIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Policies": [ {
                    "PolicyName": "puppetmasterPolicy",
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [ {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:Describe*"
                            ],
                            "Resource": "*"
                        } ]
                    }
                } ]
            }
        },

        "PuppetmasterInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "PuppetmasterIamRole" } ]
            }
        },

        "PuppetmasterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Puppetmaster security group",
                "VpcId": { "Ref": "vpcId" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "122.55.14.126/32" },
                    { "IpProtocol": "tcp", "FromPort": "8140", "ToPort": "8140", "CidrIp": "172.17.0.0/16" },
                    { "IpProtocol": "tcp", "FromPort": "8140", "ToPort": "8140", "CidrIp": "172.18.0.0/16" },
                    { "IpProtocol": "tcp", "FromPort": "8140", "ToPort": "8140", "CidrIp": "172.19.0.0/16" },
                    { "IpProtocol": "tcp", "FromPort": "8088", "ToPort": "8088", "CidrIp": "0.0.0.0/0" }
                ],
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": ["-", [ "puppetmastersg", { "Ref": "vpcEnv" } ] ] } },
                    { "Key": "Business", "Value": { "Ref": "business" } }
                ]
            }
        },

        "PuppetmasterInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": { "Ref": "PuppetmasterInstanceProfile" },
                "ImageId": { "Ref": "ami" },
                "InstanceType": { "Ref": "instanceType" },
                "KeyName": { "Ref": "sshKey" },
                "SecurityGroupIds": [ { "Ref": "PuppetmasterSecurityGroup" } ],
                "SubnetId": { "Ref": "serviceSubnetAId" },
                "BlockDeviceMappings": [
                    { "DeviceName": "/dev/sda1", "Ebs": { "DeleteOnTermination": "True" } }
                ],
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": ["-", [ "puppetmaster", { "Ref": "vpcEnv" } ] ] } },
                    { "Key": "vpc_env", "Value": { "Ref": "vpcEnv" } },
                    { "Key": "puppet_role", "Value": { "Ref": "puppetRole" } },
                    { "Key": "Business", "Value": { "Ref": "business" } }
                ],
                "UserData": { "Fn::Base64": { "Fn::Join": ["", [
                    "#!/bin/bash\n",
                    "rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm\n",
                    "yum -y install puppetserver\n",
                    "/opt/puppetlabs/puppet/bin/gem install r10k\n",
                    "mkdir -p /etc/puppetlabs/r10k\n",
                    "cat > /etc/puppetlabs/r10k/r10k.yaml << EOL\n",
                    "# The location to use for storing cached Git repos\n",
                    ":cachedir: '/var/cache/r10k'\n",
                    "\n",
                    "# A list of git repositories to create\n",
                    ":sources:\n",
                    "  # This will clone the git repository and instantiate an environment per\n",
                    "  # branch in /etc/puppetlabs/code/environments\n",
                    "  :puppet:\n",
                    "    remote: 'git@github.com:releaseph/puppet-hiera.git'\n",
                    "    basedir: '/etc/puppetlabs/code/environments'\n",
                    "EOL\n",
                    "/opt/puppetlabs/puppet/bin/r10k deploy environment\n",
                    "/opt/puppetlabs/bin/puppet config set --section master hiera_config '/etc/puppetlabs/code/environments/", { "Ref": "puppetEnv" }, "/hiera.yaml'\n",
                    "/opt/puppetlabs/bin/puppet config set --section master autosign true\n",
                    "/opt/puppetlabs/bin/puppet config set --section master dns_alt_names puppet,int.puppetmaster.", { "Ref": "hostedZoneName" }, "\n",
                    "/opt/puppetlabs/bin/puppet config set --section agent environment ", { "Ref": "puppetEnv" }, "\n",
                    "echo \"127.0.0.1 puppet\" >> /etc/hosts\n",
                    "sed -i -e 's/\\(-Xm[sx]\\)\\([0-9a-z]*\\)/\\1512m/g' /etc/sysconfig/puppetserver\n",
                    "systemctl start puppetserver\n",
                    "/opt/puppetlabs/bin/puppet agent -t"
                ] ] } }
            }
        },

        "PuppetmasterPublicRecordSet": {
            "Type" : "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": { "Ref": "hostedZoneId" },
                "Name": { "Fn::Join": [".", [ "puppetmaster", { "Ref": "hostedZoneName" } ] ] },
                "ResourceRecords": [ { "Fn::GetAtt" : [ "PuppetmasterInstance", "PublicIp" ] } ],
                "TTL": "300",
                "Type": "A"
            }
        },

        "PuppetmasterPrivateRecordSet": {
            "Type" : "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": { "Ref": "hostedZoneId" },
                "Name": { "Fn::Join": [".", [ "int", "puppetmaster", { "Ref": "hostedZoneName" } ] ] },
                "ResourceRecords": [ { "Fn::GetAtt" : [ "PuppetmasterInstance", "PrivateIp" ] } ],
                "TTL": "300",
                "Type": "A"
            }
        }

    },

    "Outputs": {
        "puppetmasterInstanceId": {
            "Description": "Logical ID of PuppetmasterInstance",
            "Value": { "Ref": "PuppetmasterInstance" }
        },

        "puppetmasterSecurityGroupId": {
            "Description": "Logical ID of PuppetmasterSecurityGroup",
            "Value": { "Ref": "PuppetmasterSecurityGroup" }
        },

        "puppetmasterPublicDnsName": {
            "Description": "DNS Name of PuppetmasterPublicRecordSet",
            "Value": { "Ref": "PuppetmasterPublicRecordSet" }
        },

        "puppetmasterPrivateDnsName": {
            "Description": "DNS Name of PuppetmasterPrivateRecordSet",
            "Value": { "Ref": "PuppetmasterPrivateRecordSet" }
        },

        "puppetmasterIamRoleArn": {
            "Description": "ARN of PuppetmasterIamRole",
            "Value": { "Fn::GetAtt" : [ "PuppetmasterIamRole", "Arn" ] }
        }
    }
}